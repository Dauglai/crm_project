import React, { useState, useContext, useEffect } from "react";
import {Link, Route, useNavigate} from "react-router-dom";
import { AuthContext } from "../../../context";
import MyButton from "../button/MyButton";
import "./Navbar.css";
import NotificationDropdown from "../../NotificationsDrop/NotificationDropDown";
import RoleList from "../RoleList/RoleList";
import api from "../../../configs/api";
import useOnlineUsers from "../../../hooks/useOnlineUsers";
import ProtectedRoute from "../../API/ProtectedRoute";
import OrderForm from "../../../pages/Order/OrderForm";
import OrderDetailPage from "../../../pages/OrderDetail/OrderDetailPage";

function Navbar() {
    const { isAuth, setIsAuth } = useContext(AuthContext);
    const [showDropdown, setShowDropdown] = useState(false);
    const [showMenu, setShowMenu] = useState(false);
    const [selectedRole, setSelectedRole] = useState("all");
    const navigate = useNavigate();
    const [dropdownVisible, setDropdownVisible] = useState(false);
    const [unreadCount, setUnreadCount] = useState(0);
    const onlineUsers = useOnlineUsers();

    useEffect(() => {
        fetchUnreadCount();
        const interval = setInterval(() => {
            fetchUnreadCount();
        }, 10000);
        return () => clearInterval(interval);
    }, []);

    const fetchUnreadCount = async () => {
        try {
            const response = await api.get("/notifications/");
            setUnreadCount(response.data.count);
        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π", error);
        }
    };


    useEffect(() => {
        const handleClickOutside = (event) => {
            if (!event.target.closest(".dropdown") && !event.target.closest(".tasks-menu")) {
                setShowDropdown(false);
            }
        };
        document.addEventListener("click", handleClickOutside);
        return () => {
            document.removeEventListener("click", handleClickOutside);
        };
    }, []);

    const handleLogout = () => {
        setIsAuth(false);
        localStorage.removeItem("auth");
        fetch("http://localhost:8000/api-auth/logout/", {
            method: "POST",
            credentials: "include",
        })
            .then((response) => {
                if (response.ok) {
                    console.log("User logged out");
                }
            })
            .catch((error) => {
                console.error("Error logging out:", error);
            });
    };

    const toggleMenu = () => {
        setShowMenu(prev => !prev);
    };

    const handleRoleChange = (role) => {
        setSelectedRole(role);
        navigate(`/tasks?role=${role}`);
    };

    return (
        <>
            <div className="header">
                <img src={require("./margin.png")} alt="–õ–æ–≥–æ—Ç–∏–ø" className="header_logo"/>
                <p>MiniCRM</p>

                <button className="menu-button" onClick={toggleMenu}>
                    ‚ò∞ –ú–µ–Ω—é
                </button>

                <div className="header_nav">
                    <ul className="header__list">
                        <li className="header__list-item">
                            <Link to="/profile">–ü—Ä–æ—Ñ–∏–ª—å</Link>
                        </li>
                    </ul>
                </div>

                <div className="nav-icons">
                    <span className="online-users">üü¢ {onlineUsers.length}</span> {/* –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —á–∏—Å–ª–æ –æ–Ω–ª–∞–π–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π */}
                    <button className="notification-icon" onClick={() => setDropdownVisible(!dropdownVisible)}>
                        üîî
                    </button>
                    {dropdownVisible && <NotificationDropdown/>}
                </div>
                <div className="header_button">
                    <MyButton onClick={handleLogout}>–í—ã–π—Ç–∏</MyButton>
                </div>
            </div>
            {/* –í—ã–¥–≤–∏–∂–Ω–æ–µ –º–µ–Ω—é */}
            <div className={`side-menu ${showMenu ? "open" : ""}`}>
                <ul className="nav-list">
                    {/* --- –†–∞–∑–¥–µ–ª "–ó–∞–¥–∞—á–∏" --- */}
                    <li className="menu-section-title">–ó–∞–¥–∞—á–∏</li>
                    <RoleList selectedRole={selectedRole} onRoleChange={handleRoleChange}/>
                    <li><Link to="/tasks/create">–°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É</Link></li>
                    <li><Link to="/tasks_by_day">–ú–æ–∏ –∑–∞–¥–∞—á–∏ –ø–æ –¥–Ω—è–º</Link></li>
                    <li><Link to="/notifications">–ó–∞–ø—Ä–æ—Å—ã</Link></li>

                    {/* --- –†–∞–∑–¥–µ–ª "–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏" --- */}
                    <li className="menu-section-title">–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏</li>
                    <li><Link to="/products">–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞</Link></li>
                    <li><Link to="/outlets">–¢–æ—Ä–≥–æ–≤—ã–µ —Ç–æ—á–∫–∏</Link></li>
                    <li><Link to="/employee">–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏</Link></li>

                    <li className="menu-section-title">–ó–∞–∫–∞–∑—ã</li>
                    <li><Link to="/orders/create">–°–æ–∑–¥–∞—Ç—å –ó–∞–∫–∞–∑</Link></li>
                    <li><Link to="/orders">–°–ø–∏—Å–æ–∫</Link></li>
                </ul>
            </div>

        </>
    );
}

export default Navbar;
